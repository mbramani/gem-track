// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum DiamondColor {
  D
  E
  F
  G
  H
  I
  J
  K
  L
  M
  N
  O
  P
  Q
  R
  S
  T
  U
  V
  W
  X
  Y
  Z
}

enum DiamondPurity {
  FL
  IF
  I1
  I2
  I3
  SI1
  SI2
  VS1
  VS2
  VVS1
  VVS2
}

enum DiamondShape {
  Asscher
  Cushion
  Emerald
  Heart
  Marquise
  Oval
  Pear
  Princess
  Radiant
  Round
}

enum ProcessStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id                     String                 @id @default(uuid())
  name                   String                 @db.VarChar(100)
  email                  String                 @unique @db.VarChar(256)
  password               String                 @db.VarChar(60)
  role                   UserRole               @default(USER)
  phoneNo                String                 @db.VarChar(15)
  gstInNo                String                 @db.VarChar(15)
  addressId              String                 @unique
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  // Relations
  address                Address                @relation(fields: [addressId], references: [id], onDelete: Cascade)
  clients                Client[]
  employees              Employee[]
  diamondPackets         DiamondPacket[]
  processes              Process[]
  diamondPacketProcesses DiamondPacketProcess[]
  Report                 Report[]
}

model Client {
  id             String          @id @default(uuid())
  clientId       String          @db.VarChar(256)
  name           String          @db.VarChar(253)
  email          String?         @db.VarChar(256)
  phoneNo        String          @db.VarChar(15)
  gstInNo        String          @db.VarChar(15)
  userId         String
  addressId      String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  address        Address         @relation(fields: [addressId], references: [id], onDelete: Cascade)
  diamondPackets DiamondPacket[]
  reports        Report[]
}

model Employee {
  id                     String                 @id @default(uuid())
  employeeId             String                 @db.VarChar(256)
  name                   String                 @db.VarChar(253)
  email                  String?                @db.VarChar(256)
  phoneNo                String                 @db.VarChar(15)
  panNo                  String                 @db.VarChar(10)
  userId                 String
  addressId              String                 @unique
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  // Relations
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  address                Address                @relation(fields: [addressId], references: [id], onDelete: Cascade)
  diamondPacketProcesses DiamondPacketProcess[]
}

model Address {
  id           String    @id @default(uuid())
  addressLine1 String    @db.Text
  addressLine2 String?   @db.Text
  city         String    @db.VarChar(255)
  state        String    @db.VarChar(255)
  country      String    @db.VarChar(255)
  postalCode   String    @db.VarChar(6)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // Relations
  user         User?
  client       Client?
  employee     Employee?
}

model DiamondPacket {
  id                     String                 @id @default(uuid())
  diamondPacketId        String                 @db.VarChar(255)
  batchNo                Decimal?               @db.Decimal(10, 2)
  evNo                   Int?
  packetNo               Decimal?               @db.Decimal
  lot                    Int?                   @db.SmallInt
  piece                  Int?                   @db.SmallInt
  makeableWeight         Decimal                @db.Decimal(10, 4)
  expectedWeight         Decimal                @db.Decimal(10, 4)
  booterWeight           Decimal                @db.Decimal(10, 4)
  diamondShape           DiamondShape
  diamondColor           DiamondColor
  diamondPurity          DiamondPurity
  receiveDateTime        DateTime               @db.Timestamptz
  deliveryDateTime       DateTime?              @db.Timestamptz
  clientId               String
  userId                 String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  // Relations
  client                 Client                 @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  diamondPacketProcesses DiamondPacketProcess[]
  reportItems            ReportItem[]
}

model Process {
  id                     String                 @id @default(uuid())
  processId              String                 @db.VarChar(255)
  name                   String                 @db.VarChar(255)
  description            String?                @db.Text
  price                  Decimal                @db.Decimal(10, 4)
  cost                   Decimal                @db.Decimal(10, 4)
  userId                 String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  // Relations
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  diamondPacketProcesses DiamondPacketProcess[]
}

model DiamondPacketProcess {
  id              String        @id @default(uuid())
  status          ProcessStatus @default(PENDING)
  startDateTime   DateTime      @db.Timestamptz
  endDateTime     DateTime?     @db.Timestamptz
  beforeWeight    Decimal       @db.Decimal(10, 4)
  afterWeight     Decimal?      @db.Decimal(10, 4)
  remarks         String?       @db.Text
  diamondPacketId String
  processId       String
  employeeId      String
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  // Relations
  diamondPacket   DiamondPacket @relation(fields: [diamondPacketId], references: [id], onDelete: Cascade)
  process         Process       @relation(fields: [processId], references: [id], onDelete: Cascade)
  employee        Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id          String       @id @default(uuid())
  reportId    String       @db.VarChar(255)
  clientId    String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  // Relations
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportItems ReportItem[]
}

model ReportItem {
  id              String        @id @default(uuid())
  diamondPacketId String
  reportId        String
  // Relations
  diamondPacket   DiamondPacket @relation(fields: [diamondPacketId], references: [id], onDelete: Cascade)
  report          Report        @relation(fields: [reportId], references: [id], onDelete: Cascade)
}
